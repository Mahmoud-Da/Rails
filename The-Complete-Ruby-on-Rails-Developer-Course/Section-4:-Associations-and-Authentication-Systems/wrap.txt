*** 1- Introduction to section 6: users, associations, ERD and more ***
In this section, we'll work with another resource in our application users and learn about associations.

- normally database will take this Type of structure where we will have multi tables
-------------------code----------------------
Database
+---------+---------+
| table 1 | table 2 |
|---------|---------|
|   Row   |   Row   |
|   Row   |   Row   |
|   Row   |   Row   |
+---------+---------+
| table 3 | table 4 |
|---------|---------|
|   Row   |   Row   |
|   Row   |   Row   |
|   Row   |   Row   |
-------------------code----------------------


- Right now we only have the articles table, and in this section we're going to introduce users.
So we'll have a separate users table to go with our articles table and the users table will look like
this.
-------------------code----------------------
users 
+----+----------+----------------+----------+
| id | username  | email          | password |
+----+----------+----------------+----------+
| 1  |          |                |          |
| 2  |          |                |          |
| 3  |          |                |          |
| 4  |          |                |          |
+----+----------+----------------+----------+
-------------------code----------------------

- Now the association will form between users and articles is that users will create articles, so we'll
need to track which user created which article.

That way we have a creator reference for articles and how would we track this?
- We'll do so by introducing a user ID field in the articles table.
In this field, we'll store the user ID of the user who created each article.
So each row, which signifies each article, will have the user ID column filled in.

-------------------code----------------------
users
+----+------+----------------+----------+
| id | name | email          | password |
+----+------+----------------+----------+
| 1  |      |                |          |
| 2  |      |                |          |
| 3  |      |                |          |
| 4  |      |                |          |
+----+------+----------------+----------+

articles
+----+-------+-------------+----------+--------+
| id | title | description | user_id  |
+----+-------+-------------+----------+--------+
| 1  |       |             |          |
| 2  |       |             |          |
| 3  |       |             |          |
| 4  |       |             |          |
+----+-------+-------------+----------+--------+
-------------------code----------------------

- example Here we can see that Articles one and two have the user ID column filled in with the number two.
From this we can infer that the user with ID of two created the first and second articles.
-------------------code----------------------
users
+----+------+----------------+----------+
| id | name | email          | password |
+----+------+----------------+----------+
| 1  |      |                |          |
| 2  |      |                |          |
| 3  |      |                |          |
| 4  |      |                |          |
+----+------+----------------+----------+

articles
+----+-------+-------------+----------+--------+
| id | title | description | user_id  |
+----+-------+-------------+----------+--------+
| 1  |       |             |     2    |
| 2  |       |             |     2    |
| 3  |       |             |     1    |
| 4  |       |             |     3    |
+----+-------+-------------+----------+--------+
-------------------code----------------------


- So when you look at the articles table, this column, this user ID column is what is known as the "foreign key"
This tracks the IDs of the users, which happen to be the primary key of the users table.
So the ID column in the users table is known as a primary key.


- and this association between users and articles is called a one to many association.
Since one user can create many articles 
in other word each user can then create many articles.

But each article, on the other hand, will only have one creator.
Thus, the one to many, with one being on the user side and many on the articles side.
You can visualize this relationship by using what's called an entity relationship diagram or ERD with

-------------------code----------------------
+----------------+          +----------------+
|     users      |          |    articles     |
+----------------+          +----------------+
| id     int     |          | id     int      |
| username string |          | title  string   |
| email   string  |          | description text |
| password string |          | user_id int     |
+----------------+          +----------------+
          1 |                          * |
            |----------------------------|
-------------------code----------------------

PS: we can use "*" or "n" for the many relationship


we can check any association by looking to rails guide 

*** 2- Create users ***
we will create user table with email and userName fields
-------------------code----------------------
users
+----+------+-------+----------+
| id | username | email |
+----+------+-------+----------+
| 1  |      |       | 
| 2  |      |       |
| 3  |      |       | 
| 4  |      |       |
+----+------+-------+----------+
-------------------code----------------------

by running this command 
-------------------code----------------------
rails g model user
-------------------code----------------------

- we will add the email and username to the migration file
-------------------code----------------------
class CreateUsers < ActiveRecord::Migration[8.0]
  def change
    create_table :users do |t|
      t.string :username
      t.string :email
      t.timestamps
    end
  end
end
-------------------code----------------------


- next we run the migration file 
-------------------code----------------------
rails db:migrate
-------------------code----------------------

- finally we check our schema
-------------------code----------------------
create_table "users", force: :cascade do |t|
    t.string "username"
    t.string "email"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
end
-------------------code----------------------

- cause the g model command created  our model file directly 
we can access the user table using the rails console and create a user 
for test 
-------------------code----------------------
> user = User.new(username: "lili", email: "lili@example.com")
> user.save!
-------------------code----------------------

- and check our users
-------------------code----------------------
> User.all
  User Load (0.2ms)  SELECT "users".* FROM "users" /* loading for pp */ LIMIT 11 /*application='RailsApp'*/
=>
[#<User:0x0000000107b8d5c8
  id: 1,
  username: "lili",
  email: "[FILTERED]",
  created_at: "2025-01-02 08:29:04.497277000 +0000",
  updated_at: "2025-01-02 08:29:04.497277000 +0000">]
-------------------code----------------------

*** 3- Add user validations ***
we will add the validations for our User class/model
Validations for User class:
- username must be present and unique, length between 3 and 25 characters
- email must be present and unique, length max of 105 characters
- validate email format using regex (regular expression)


PS:
The ruby regular expression used to match the format of valid email addresses is listed below.
-------------------code----------------------
/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
-------------------code----------------------

- we can go to the rails guide and go to Guide Index and select "Active Record Validations"
https://guides.rubyonrails.org/active_record_validations.html
- and add the validations 
same as using length: { minimum: 3, maximum: 25}, but using "in" the newest approach
-------------------code----------------------
validates :username, presence: true, uniqueness: true, length: { in: 3..25 }
validates :email, presence: true, uniqueness: true, length: { maximum: 150 }, format: { with: /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i,
  message: "only allow email pattern" }
-------------------code----------------------


- now we test our validations
-------------------code----------------------
> user = User.new
> user.username= "t"
> user.email = "test"
> user.valid?
> user.errors.full_messages
["Username is too short (minimum is 3 characters)",
 "Email only allow email pattern"]
-------------------code----------------------

- now we refactor our code by saving the regex in content 
PS: Constants should be written in all uppercase letters,
with words separated by underscores.
ex:
-------------------code----------------------
MAX_USERS = 100
-------------------code----------------------

- in our case we will save the Email regex and we should put the contents
on the top of the file
-------------------code----------------------   
class User < ApplicationRecord
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i

  validates :username, presence: true, uniqueness: true, length: { in: 3..25 }
  validates :email, presence: true, uniqueness: true, length: { maximum: 150 }, format: { with: VALID_EMAIL_REGEX,
    message: "only allow email pattern" }
end
-------------------code----------------------

- we can test our regex for ruby by using Rubular
https://rubular.com/


- we grab only between the slashes and test it 

PS: In the context of the regular expression w've provided:
The "i" at the end of the regex pattern is a flag that stands for "case insensitive." 
This means that the regex will match email addresses regardless of whether the letters are uppercase or lowercase.
For example, both example@domain.com and Example@Domain.Com would be considered valid matches against this regex.



*** 4-One to many association ***
as we said before to track the article which belongs to users we should add foreign key to the articles table 

- so first we create migration file using this command 
-------------------code----------------------
rails g migration add_user_id_to_articles
-------------------code----------------------

- bigint VS integer
******************************************************************************************************
- int (Integer):
Size: 4 bytes
Range: -2,147,483,648 to 2,147,483,647
Use Case: Suitable for most applications where values do not exceed the integer range.
- bigint (Big Integer):
Size: 8 bytes
Range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
Use Case: Ideal for applications with large datasets or when expecting a high number of records, such as user IDs.
In your migration, using bigint for user_id is appropriate if you anticipate a large number of users.
******************************************************************************************************


- we add the user_id 
-------------------code----------------------
def change
  add_column :articles, :user_id, :bigint
end
-------------------code----------------------

- we run the migration
-------------------code----------------------
rails db:migrate
-------------------code----------------------

- next we add the associations 
in the User model  we add the has_many
-------------------code----------------------
class User < ApplicationRecord
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  has_many :articles

  validates :username, presence: true, uniqueness: true, length: { in: 3..25 }
  validates :email, presence: true, uniqueness: true, length: { maximum: 150 }, format: { with: VALID_EMAIL_REGEX,
    message: "only allow email pattern" }
end
-------------------code----------------------


and in the user model we add belongs_to user
PS: when we use belongs_to is single so we add "user" not "users" 
-------------------code----------------------
class Article < ApplicationRecord
  belongs_to :user
  
  validates :title, presence: true, length: { in: 6..100 }
  validates :description, presence: true, length: { in: 10..300 }
end
-------------------code----------------------

- now we test our relations 
-------------------code----------------------
> Article.first.update(user_id: 1)
> article = Article.first
> article.user
  User Load (0.3ms)  SELECT "users".* FROM "users" WHERE "users"."id" = 1 LIMIT 1 /*application='RailsApp'*/
=>
#<User:0x000000010a9398a0
 id: 1,
 username: "lili",
 email: "[FILTERED]",
 created_at: "2025-01-02 08:29:04.497277000 +0000",
 updated_at: "2025-01-02 08:29:04.497277000 +0000">
-------------------code----------------------

- now we test it on our screen 
we can`t created article why?
we debug our create action we want to stop the code before saving the article
-------------------code----------------------
def create 
    @article = Article.new(article_params)
    debugger
    if @article.save
      flash[:notice] = "Article was created successfully"
      redirect_to @article
    else 
      flash[:alert] = "Article created failed"
      render :new
    end
  end
-------------------code----------------------

- now we create article and press save 
-------------------code----------------------
Articles_controller.rb
    16|   def edit
    17|   end
    18|
    19|   def create
    20|     @article = Article.new(article_params)
=>  21|     debugger
    22|     if @article.save
    23|       flash[:notice] = "Article was created successfully"
    24|       redirect_to @article
    25|     else
=>#0	ArticlesController#create at ~/moody/Rails/The-Complete-Ruby-on-Rails-Developer-Course/Section-4:-Associations-and-Authentication-Systems/rails-app/app/controllers/articles_controller.rb:21
  #1	ActionController::BasicImplicitRender#send_action(method="create", args=[]) at ~/.rbenv/versions/3.2.2/lib/ruby/gems/3.2.0/gems/actionpack-8.0.1/lib/action_controller/metal/basic_implicit_render.rb:8
-------------------code----------------------

- we check @article and see if it valid 
-------------------code----------------------
(ruby) @article.valid?
false
(ruby) @article.errors.full_messages
["User must exist"]
-------------------code----------------------

- later after setting up the Authentication we will let only the logged in user 
to create an article
but for now we will set all the article to the first users 
PS: if our db is empty of users we will not be able to create any user 
-------------------code----------------------
def create 
  @article = Article.new(article_params)
  @article.user = User.first
  if @article.save
    flash[:notice] = "Article was created successfully"
    redirect_to @article
  else 
    flash[:alert] = "Article created failed"
    render :new
  end
end
-------------------code----------------------

- now we retest our creating article function and we can see it works properly 

- now we need to update the other Article users_id for User.first by using the update_all method
-------------------code----------------------
> Article.update_all(user_id: 1)
  Article Update All (2.9ms)  UPDATE "articles" SET "user_id" = 1 /*application='RailsApp'*/
=> 32
-------------------code----------------------


*** 5- Show user info in articles ***
we will show the user name of the User to the Articles
we can access the user form article like article.user.username 

in index.html we add Author
-------------------code----------------------
<tr>
  <th>Title</th>
  <th>Description</th>
  <th>Author</th>
  <th colspan="3" >Actions</th>
</tr>
-------------------code----------------------

- and we map the user name 
-------------------code----------------------
<% @articles.each do |article| %>
  <tr>
  <td><%= article.title %></td>
  <td><%= article.description %></td>
  <td><%= article.user.username %></td>
  <td><%= link_to "Show", article_path(article) %></td>
  <td><%= link_to "Edit", edit_article_path(article) %></td>
  <td><%= button_to "Delete", article_path(article), method: :delete, data: { turbo_confirm: "Are you sure you want to delete this article?" } %></td>
</tr>
<% end %>
-------------------code----------------------

- then we add it to show page 
-------------------code----------------------
<p><strong>Title: </strong><%= @article.title %></p>
<p><strong>Description: </strong><%= @article.description %></p>
<p><strong>User: </strong><%= @article.user.username %></p>
-------------------code----------------------


*** 6-Alter object state before_save ***
we will see how to use the before save method and cover how we can change an object's
state right before it saves to the database.

Right now, if you look at the email field, it can have random capitalized letters in it.
But for email addresses we want to save all to lowercase before saving to the database.

- we can check that in the rails console
and we can see it created
-------------------code----------------------
> User.create(username: "Mike",email: "miKesP@example.com" )
 TRANSACTION (0.0ms)  BEGIN immediate TRANSACTION /*application='RailsApp'*/
  User Exists? (0.5ms)  SELECT 1 AS one FROM "users" WHERE "users"."username" = 'Mike' LIMIT 1 /*application='RailsApp'*/
  User Exists? (0.0ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = 'miKesP@example.com' LIMIT 1 /*application='RailsApp'*/
  User Create (0.1ms)  INSERT INTO "users" ("username", "email", "created_at", "updated_at") VALUES ('Mike', 'miKesP@example.com', '2025-01-02 13:00:06.561071', '2025-01-02 13:00:06.561071') RETURNING "id" /*application='RailsApp'*/
  TRANSACTION (0.1ms)  COMMIT TRANSACTION /*application='RailsApp'*/
=>
#<User:0x00000001075a39c8
 id: 2,
 username: "Mike",
 email: "[FILTERED]",
 created_at: "2025-01-02 13:00:06.561071000 +0000",
 updated_at: "2025-01-02 13:00:06.561071000 +0000">
-------------------code----------------------

- we can turn each email to lowercase before it save to the database 
-------------------code----------------------
before_save { self.email = email.downcase }
-------------------code----------------------


- this "self" is referencing each object of the user class, so when it comes to the email field for any
of these objects before saving it to the database, it runs the Downcase method on that field and then
saves it.
-------------------code----------------------
class User < ApplicationRecord
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  has_many :articles
  
  before_save { self.email = email.downcase }
  validates :username, presence: true, uniqueness: true, length: { in: 3..25 }
  validates :email, presence: true, uniqueness: true, length: { maximum: 150 }, format: { with: VALID_EMAIL_REGEX,
    message: "only allow email pattern" }
end
-------------------code----------------------

- now we try it again 
-------------------code----------------------
> User.create(username: "Mike3",email: "miKessP@example.com" )

> User.last.email
  User Load (0.3ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT 1 /*application='RailsApp'*/
=> "mikessp@example.com"
-------------------code----------------------


*** 7- Add secure password ***
form this lesson we will built authentication from scratch we will use gem called "device"
PS: from rails 8 the authentication will be available within it without using third library 


- first we go to the gems.org 
-------------------code----------------------
https://rubygems.org/
-------------------code----------------------

- search for "device" and we add the gem to our Gemfile
PS: when downloading a gem we should only set the version of that gem 
-------------------code----------------------
gem 'devise', '~> 4.9', '>= 4.9.4'
-------------------code----------------------

- and we add comment 
-------------------code----------------------
# Authentication
gem 'devise', '~> 4.9', '>= 4.9.4'
-------------------code----------------------

- now we have a gem which commented called "bcrypt"
we uncommented
-------------------code----------------------
# Use Active Model has_secure_password [https://guides.rubyonrails.org/active_model_basics.html#securepassword]
gem "bcrypt", "~> 3.1.7"
-------------------code----------------------

- And this is the gem that provides all the security and hashing features that we're going to need.
So how does saving passwords for users actually work and how does it authenticate?

- Let's say I have a users table like this and I have a user with username of monsieur and email of some
email. Now this user needs to add a password to their account so they can sign up for the application.
Let's say they choose the password. => "password123"
-------------------code----------------------
users 
+----+----------+----------------+----------+
| id | username  | email          | password |
+----+----------+----------------+----------+
| 1  | mashrur  | mash@ex..      | password123 |
| 2  |          |                |          |
| 3  |          |                |          |
| 4  |          |                |          |
+----+----------+----------------+----------+
-------------------code----------------------

What Bcrypt is going to do is it's going to hash this password and save a string for ex:
-------------------code----------------------
JPeq6FCbu6ALfYr00Fe
-------------------code----------------------

this is what's known as a "hashed password", and it's a one way hash. which means 
Basically, there's no way to convert this back to "password123"

- How "hashing bit" and "salt" work? 
general idea is if your database is compromised, let's say a hacker gets access to all this
data, they have no way of knowing what your user's username and password or email and password combinations
are so they won't be able to use it to hack into other accounts that the user might have.
So that's the advantage of having a hashed password.


But it's not just enough to have just a simple hash using a hashing algorithm.
hashing algorithms are math and the algorithms and how they work are known. So if the hacker knew what algorithm was being used in a particular authentication system, then you
could have a password such as "password123" put through that hashing algorithm and it
would always give you the same hash so the hacker could try a table of thousands or maybe millions of known words and their hashed versions and look for a match.
And this type of reversal of cryptographic hash functions using such a table is known as a "rainbow attack".
ex:
-------------------code----------------------
password123  →  hashing algorithm  →  MtjV3V5v0LW0
                                      JPeq6FCbu6AL
                                      fYr00Fe

password      →  hashing algorithm  →  Y2SoBecnR7L/
                                      Ou33Q7W4rEz
                                      vS2/FeFi

hello123      →  hashing algorithm  →  66vd8pbp.Gwx
                                      4oDYMoHYltkP
                                      dEIMOS6
-------------------code----------------------


_ So what's the solution to make this type of encryption one way?
the solution is what we called "salt"
salt: is a random piece of text that's added to each password before hashing it.

we will see that using Bcrypt so we install the bundle
-------------------code----------------------
bundle install
-------------------code----------------------

- then we check our Gemfile.lock to see if it installed


- to use Bcrypt we need to add has_secure_password to our User model
-------------------code----------------------
class User < ApplicationRecord
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  has_many :articles
  
  before_save { self.email = email.downcase }
  validates :username, presence: true, uniqueness: true, length: { in: 3..25 }
  validates :email, presence: true, uniqueness: true, length: { maximum: 150 }, format: { with: VALID_EMAIL_REGEX,
    message: "only allow email pattern" }

  has_secure_password
end
-------------------code----------------------


- now we add the password field 
-------------------code----------------------
rails g migration add_password_digest_to_users
-------------------code----------------------

- we called "password_digest" to the User table
-------------------code----------------------
class AddPasswordDigestToUsers < ActiveRecord::Migration[8.0]
  def change
    add_column :users, :password_digest, :string
  end
end
-------------------code----------------------

- we migrate the changes
-------------------code----------------------
rails db:migrate
-------------------code----------------------

- now we can test Bcrypt in rails console
-------------------code----------------------
> BCrypt::Password.create("password")
=> "$2a$12$96zNwE5bsABseZbupdpy3OLKrve4dFaDDopXXPPbgllFIp/b6fiO6"
-------------------code----------------------

- now we had hashed password
but what if we do it again 
-------------------code----------------------
> BCrypt::Password.create("password")
=> "$2a$12$96zNwE5bsABseZbupdpy3OLKrve4dFaDDopXXPPbgllFIp/b6fiO6"

> BCrypt::Password.create("password")
=> "$2a$12$haEjiyYy2.ryk9eh4Bl2MOIOmZ2UfEpsi/LF2qMT3SbnqV3xbQQ3O"
-------------------code----------------------

- we got a different password And this is happening because of "salt" or that piece of text that was added using a random combination
of things When I was creating this and added to the password before it was hashed and Bcrypt has the
mechanism in place to read that piece or that salt piece of text when converting a text that I give
back to the hash.

- now we can see that in action we can take that value using "_"
-------------------code----------------------
> BCrypt::Password.create("password")
=> "$2a$12$OwJ.MX87VGtHgobPk5mFpeGfDiIUOUqGE//C/6gnZ89SeT.4x.0he"

> password = _
=> "$2a$12$OwJ.MX87VGtHgobPk5mFpeGfDiIUOUqGE//C/6gnZ89SeT.4x.0he"
-------------------code----------------------

- now we can see the salt part
-------------------code----------------------
> password.salt
=> "$2a$12$OwJ.MX87VGtHgobPk5mFpe"
-------------------code----------------------

- now let`s test it in our database
-------------------code----------------------
> user = User.first
  User Load (0.3ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT 1 /*application='RailsApp'*/
=>
#<User:0x00000001078a7098
...

> user
=>
#<User:0x00000001078a7098
 id: 1,
 username: "Lili",
 email: "[FILTERED]",
 created_at: "2025-01-02 12:43:15.139987000 +0000",
 updated_at: "2025-01-02 12:43:15.139987000 +0000",
 password_digest: nil>

 > user.password = "password123"
=> "password123"
rails-app(dev)> user.save!
  TRANSACTION (0.3ms)  BEGIN immediate TRANSACTION /*application='RailsApp'*/
  User Exists? (0.2ms)  SELECT 1 AS one FROM "users" WHERE "users"."username" = 'Lili' AND "users"."id" != 1 LIMIT 1 /*application='RailsApp'*/
  User Exists? (0.1ms)  SELECT 1 AS one FROM "users" WHERE "users"."email" = 'lili@bobo.com' AND "users"."id" != 1 LIMIT 1 /*application='RailsApp'*/
  User Update (0.1ms)  UPDATE "users" SET "updated_at" = '2025-01-03 09:58:26.186183', "password_digest" = '$2a$12$6QwdKrZccrPQksVjXdjBSO73ssSn/G8RaQDHsNXIWJx/HnffcSSPi' WHERE "users"."id" = 1 /*application='RailsApp'*/
  TRANSACTION (0.7ms)  COMMIT TRANSACTION /*application='RailsApp'*/
=> true
-------------------code----------------------

- we can see it turned to hashed password in the TRANSACTION
and we can check it and see that it changes
-------------------code----------------------
> user.password_digest
=> "$2a$12$6QwdKrZccrPQksVjXdjBSO73ssSn/G8RaQDHsNXIWJx/HnffcSSPi"
-------------------code----------------------

- now for authenticate we can use the device method which called "authenticate" to check if the password is 
authenticated 
-------------------code----------------------
rails-app(dev)> user.authenticate("password")
=> false
rails-app(dev)> user.authenticate("password123")
=>
#<User:0x00000001078a7098
 id: 1,
 username: "Lili",
 email: "[FILTERED]",
 created_at: "2025-01-02 12:43:15.139987000 +0000",
 updated_at: "2025-01-03 09:58:26.186183000 +0000",
 password_digest: "[FILTERED]">
-------------------code----------------------

- so what we will do when user try to login using either there name or email we will take 
that name and find that user data in the db Then run the authenticate method on that data
Passing in the password that they're entering to see if they are indeed using the right password.


*** 8- New user sign up form ***

we will create sign up form the first 
to access that we don`t want to access 

we want to do is to create sign up route
-------------------code----------------------
http://localhost:3000/user/new
-------------------code----------------------

- instead we want to access it using sginup keyword 
-------------------code----------------------
http://localhost:3000/signup
-------------------code----------------------

- so the first thing to do is to add sigup route and set it to user with the new action 
-------------------code----------------------
get "signup", to: "user#new"
-------------------code----------------------

- now to check if the route is working  we access
-------------------code----------------------
http://localhost:3000/signup
-------------------code----------------------

we got this error so the routing is working fine
-------------------code----------------------
uninitialized constant UserController
-------------------code----------------------

- next we create the controller 
-------------------code----------------------
rails g controller users
-------------------code----------------------

- we add the new action 
-------------------code----------------------
class UsersController < ApplicationController
  def new
    @user = User.new
  end
end
-------------------code----------------------

- next we create the sign up form we do the same approach like the article
we copy form partial and new file  file and change the values
-------------------code----------------------
<h1>Sign up User</h1>

<%= render "form" %>
-------------------code----------------------


and in the form partial we change our labels
-------------------code----------------------
<% if @user.errors.any? %>
  <h2>The following errors prevented the article from being saved</h2>
  <ul>
    <% @user.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
  </ul>
<% end %>

<%= form_with model: @user, local: true do |form| %>
  <div>
    <%= form.label :username %>
    <br/>
    <%= form.text_field :username %>
    
  </div>
  <br/>
  <div>
    <%= form.label :email %>
    <br/>
    <%= form.text_field :email %>
  </div>
  <br/>
  <div>
    <%= form.label :password_digest %>
    <br/>
    <%= form.text_field :password_digest %>
  </div>
  <br/>
  <%= form.submit %>
<% end %>
<p>
  <%= link_to "Cancel and Return to The articles", articles_path %> 
</p>
-------------------code----------------------

- now when we access the sginub route we got error 
-------------------code----------------------
undefined method `users_path' for #<ActionView::Base:0x000000000249f0>
-------------------code----------------------

what happing here is that is looking for the form submission path which we don`t 
have defined in our route 
on our routes we only have the sign up path and since the form deals with the user model, it will look for
a users path defined to submit the post request to once the form is complete and submitted, but right
now it can't find it. on other word we only have get method for the users in our routes and there is no
post route so when the form is submitted rails doesn`t know where tp send the post request
to fix that we add post route and we set it to create 
-------------------code----------------------
post "users", to: "users#create"
-------------------code----------------------

- now the form is working next we must create "create" action 

